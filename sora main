
<!DOCTYPE html>
<html>
  <head>
    <title>Sora</title>
    <meta name="description" content="Where students read. Sora, the reading app for students, by OverDrive." />
    <link rel="alternate" hreflang="x-default" href="https://soraapp.com" />
    <meta name="robots" content="nofollow">

    <meta charset="utf-8" />
    <meta name="x-wishbone-version" content="13.0.0" />
    <meta name="x-wishbone-sha" content="unknown" />
    <meta name="x-wishbone-timestamp" content="" />
    <meta name="x-wishbone-channel" content="main" />
    <meta name="x-roster-root" content="https://soraapp.com" />
    <meta name="x-sentry-uri" content="https://sentry.soraapp.com" />
    <meta name="x-thunder-uri" content="https://thunder.api.overdrive.com" />
    <meta name="x-postish-uri" content="https://postish.svc.overdrive.com" />
    <meta name="x-stintish-uri" content="https://stintish.svc.overdrive.com" />
    <meta name="x-taggish-uri" content="https://taggish-sora.svc.overdrive.com" />
    <meta name="x-sage-uri" content="https://sage-sora.svc.overdrive.com" />
    <meta name="x-autocomplete-uri" content="https://autocomplete.api.overdrive.com" />
    <meta name="x-autocomplete-key" content="5cb45000b7f1451689d2a643dbbdbf47" />
    <meta name="x-dictionary-uri" content="https://dictionary.svc.overdrive.com" />
    <meta name="x-libfinder-uri" content="https://libraryfinder.api.overdrive.com" />
    <meta name="x-libfinder-key" content="kjexg7ubsh25wa6m8kbv7b9a4ewg9uuk" />
    <meta name="x-ntc-uri" content="https://extras.overdrive.com" />
    <meta name="x-ntc-api-uri" content="https://ntc.api.overdrive.com" />
    <meta name="x-ntc-target-client" content="ntc-website" />
    <meta name="x-wishbone-env" content="charlie" />
    <meta name="x-asset-root" content="/assets/wishbone/13.0.0" />
    <meta name="x-language-path" content="/assets/wishbone/13.0.0/translations/" />
    <meta name="x-polyfill-path" content="/assets/wishbone/13.0.0/assets/polyfills/" />
    <meta name="x-vapid-public-key" content="BCuMEW4juvu6En0Wh4UJOThs7lWabWoN4DooSCyjZ1YG-c0DiiyGObn4xlOOqvlXQjfd_KFm-CjAeX72DGmxfeM" />

    <meta
      name="viewport"
      content="initial-scale=1.0,minimum-scale=1.0,maximum-scale=1.0,user-scalable=no,viewport-fit=cover"
    />
    <meta name="apple-mobile-web-app-capable" content="yes" />
    <meta name="mobile-web-app-capable" content="yes" />
    <meta name="theme-color" content="#000">
    <link rel="manifest" href="/assets/wishbone/13.0.0/assets/web-app-manifest.json" />

    <link
      rel="icon"
      href="/assets/wishbone/13.0.0/assets/images/favicon-192.png"
      sizes="192x192"
    />
    <link
      rel="apple-touch-icon"
      href="/assets/wishbone/13.0.0/assets/images/turbo-ios-icon-180.png"
      sizes="180x180"
    />
    <style nonce="9b0c92640c47264efb11acc5274dc5a7">
      html,body {
        --splash-foreground: #000;
        overflow: hidden;
        width: 100%;
        height: 100%;
        font-size: 62.5%;
        background-color: #fff;
        margin: 0;
        color-scheme: only light;
      }
      .data-high-contrast_on body  {
        --splash-foreground: #fff;
        background-color: #1b1c22;
      }
      .chatterbox {
        position: absolute;
        height: 0;
        width: 100%;
        overflow: hidden;
        white-space: nowrap;
        letter-spacing: 10em;
      }
      .spinner {
        position: absolute;
        top: 0;
        bottom: 0;
        left: 0;
        right: 0;
        width: 64px;
        height: 64px;
        margin: auto;
        -webkit-animation: spinner-rotate 1000ms linear infinite;
        animation: spinner-rotate 1000ms linear infinite;
      }
      #loading-spinner .icon-solid {
        fill: var(--splash-foreground);
        opacity: 0.4;
      }
      @-webkit-keyframes spinner-rotate { 100% {
        -webkit-transform: rotate(360deg);
        transform: rotate(360deg);
      } }
      @keyframes spinner-rotate { 100% {
        -webkit-transform: rotate(360deg);
        transform: rotate(360deg);
      } }
      .resource-error .arena {
        display: none;
      }
      .resource-error .spinner {
        display: none;
      }
      .error-container {
        display: flex;
        flex-direction: column;
        margin: 0 auto;
        justify-content: center;
        align-items: center;
        min-height: 100%;
        font-family: -apple-system,  "Roboto", "Segoe UI", sans-serif;
        width: 50rem;
        max-width: 90%;
      }
      .resource-error-message {
        text-align: center;
        color: var(--splash-foreground);
      }
      .resource-error-message > p {
        user-select: text;
        line-height: 1.3;
        cursor: auto;
      }
      .resource-error-button {
        background: #1537f4; /* Primary blue */
        color: #fff;
        padding: 12px 38px;
        min-width: 200px;
        border-radius: 50px;
        margin: 20px;
        -webkit-transition: all .1s ease;
        transition: all .1s ease;
        border: none;
        text-align: center;
        font-weight: bold;
        cursor: pointer;
      }
      .resource-error-button:active {
        -webkit-transform: scale(.96);
        transform: scale(.96);
      }
      .resource-error-button:hover {
        -webkit-filter: brightness(0.9);
        filter: brightness(0.9);
      }
      .arena {
        display: none;
      }
      #style-canary {
        position: absolute;
        width: 100px;
        height: 100px;
      }
    </style>
  </head>
  <body>
    <div id="loading-spinner" class="spinner" tabindex="0" role="img" aria-label=Loading >
        <svg viewBox="0 0 64 64" version="1.1" xmlns="http://www.w3.org/2000/svg">
        <title> Loading </title>
        <g stroke='none' stroke-width='1' fill='#000000' fill-rule='evenodd' class='icon-solid'>
    <path d="M32,52L32,52c-11,0-20-9-20-20c0-1.2,1-2.2,2.2-2.2c0,0,0,0,0,0c1.2,0,2.2,1,2.2,2.2c0,8.6,7,15.5,15.6,15.5
        c1.2,0,2.2,1,2.2,2.2S33.3,52,32,52z M49.8,34.2c-1.2,0-2.2-1-2.2-2.2c0-8.6-7-15.6-15.6-15.6c-1.2,0-2.2-1-2.2-2.2s1-2.2,2.2-2.2
        h0c11,0,20,9,20,20C52,33.2,51,34.2,49.8,34.2L49.8,34.2z"/>
    </g>
    </svg>
    </div>
    <div id="style-canary"></div>
  </body>
  <!-- ERROR HANDLING -->
  <script type="text/javascript" id="NAUTILUS_error_handling" nonce="9b0c92640c47264efb11acc5274dc5a7">
    try {
      (function () {
        var devicePrefersContrast = window.matchMedia(
          '(prefers-contrast: more)'
        ).matches;
        var defaultOn =
          devicePrefersContrast && localStorage.getItem('hcm:last') === 'default';
        if (localStorage.getItem('hcm:last') === 'on' || defaultOn) {
          document.documentElement.classList.add('data-high-contrast_on');
        }

        if (parent != self && location.pathname.indexOf('/_proxy-') == 0) {
          parent.postMessage(JSON.stringify({
            name: 'bifocal:view:failure',
            dest: 'client',
            errorObject: {
              msg: 'Tried to load to /_proxy'
            }
          }), '*');
          window.stop();
        }
      })();
    } catch (ex) {}
    window.NAUTILUS = {};
    NAUTILUS.fixAttempt = (function() {
      try {
        if (!window.location.search) {
          return;
        }
        if (window.location.search.indexOf('&reset') > -1) {
          return 'reset';
        }
        if (window.location.search.indexOf('&retry') > -1) {
          return 'retry';
        }
      } catch(ex) { }
    })();

    NAUTILUS.timeSinceLaunch = (function() {
      var launchedAt = (new Date()).getTime();

      return function() {
        return (new Date()).getTime() - launchedAt;
      }
    })();

    NAUTILUS.handleReady = function () {
      var body = {};
      if (NAUTILUS.fixAttempt) {
        body.errorMessage = NAUTILUS.fixAttempt === 'retry'
          ? 'CLIENT RECOVERED: Retry with roster wipe'
          : 'CLIENT RECOVERED: Reset app';
        NAUTILUS.submitToSage(body);
      }
      NAUTILUS.reattempts(0);
      var scriptTag = document.querySelector('#NAUTILUS_error_handling');
      if (scriptTag) { scriptTag.parentNode.removeChild(scriptTag); }
    }

    NAUTILUS.onScriptError = function (error, url, lineNumber) {
      var isShell = false;
      try {
        isShell = typeof(url) === 'string' && url.indexOf('nautilus-shell') > -1;
      } catch(ex) {};
      var isWarning = (function () {
        try {
          if (typeof(url) !== 'string') {
            return false;
          }
          if (url.indexOf('chrome-extension') > -1) {
            return true;
          }
          if (typeof(error) !== 'string') {
            return false;
          }
          if (error.match(/querySelectorAll.*id='1982/)) {
            return true;
          }
          if (url.match(/\.js$/)) {
            if (url.indexOf("/assets/wishbone/13.0.0") === -1) {
              return true;
            }
          } else {
            if (lineNumber === 1 && error.indexOf("BRIDGE") === -1) {
              return true;
            }
          }

          return false;
        } catch(ex) {
          return false;
        };
      })();

      var errorInfo = {};
      if (typeof(error) === 'string') {
        errorInfo.message = error;
        errorInfo.source = url + (lineNumber ? ':' + lineNumber : '');
      } else {
        errorInfo = error;
      }

      var errorMessage = (isShell ? 'SHELL' : 'CLIENT') + ' LOAD ' + (isWarning ? 'WARNING' : 'ERROR') + ': ' + errorInfo.message;

      if (isWarning) {
        setTimeout(function () {
          NAUTILUS.submitToSage({
            errorMessage: errorMessage,
            errorSource: errorInfo.source,
          });
        }, 100);
        return console.warn('[NAUTILUS] LOAD WARNING', errorMessage)
      }
      if (window.stop && !isShell) {
        window.stop();
      }
      console.warn('[NAUTILUS] LOAD ERROR', errorInfo.message, errorInfo.source);
      NAUTILUS.handleError({
        message: errorMessage,
        source: errorInfo.source,
        data: errorInfo.data
      });
    }


    NAUTILUS.onResourceError = function (elem) {
      var isShell = false;
      var source = (function (){
        try {
          return elem.href || elem.src || elem.outerHTML;
        } catch (e) {
          return '';
        }
      })();
      try {
        isShell = source.indexOf('nautilus-shell') > -1;
      } catch(ex) {};

      if (window.stop && !isShell) {
         window.stop();
      }
      console.warn('[NAUTILUS] RESOURCE ERROR', source);
      if (NAUTILUS.errorInfo) {
        return;
      }
      NAUTILUS.handleError({
        message:  (isShell ? 'SHELL' : 'CLIENT') + ' RESOURCE ERROR',
        source: source
      });
    }


    NAUTILUS.handleError = function (errorInfo) {
      try {
        var match = window.location.search.match(/repair=(\d+)/);
        if (match) {
          var data = errorInfo.data || {};
          data.repairId = match[1];
          errorInfo.data = data;
        }
      } catch (ex) {}
      NAUTILUS.errorInfo = errorInfo;
      setTimeout(function() {
        NAUTILUS.submitAutomaticErrorReport();
      }, 100);
      NAUTILUS.schedule(NAUTILUS.autoRepair, 250);
    }


    NAUTILUS.submitAutomaticErrorReport = function () {
      var bridgeAvailable = NAUTILUS.transmitViaBridge({
        name: 'diagnostics:client:error',
        error: NAUTILUS.errorInfo
      });
      var errorData = NAUTILUS.errorInfo.data || {};
      errorData.phase = 'launch';
      errorData.fixAttempt = NAUTILUS.fixAttempt;
      errorData.timeToError = NAUTILUS.timeSinceLaunch();
      errorData.bridgeAvailable = bridgeAvailable;
      var sageBody = {
        errorMessage: NAUTILUS.errorInfo.message,
        errorSource: NAUTILUS.errorInfo.source,
        errorData: errorData,
        shouldPersist: false
      };
      NAUTILUS.submitToSage(sageBody);
    }


    NAUTILUS.submitToSage = function (errorBody) {
      errorBody = errorBody || {};
      try {
        errorBody.userAgentString = navigator.userAgent;
        errorBody.userAgentWidth = window.innerWidth;
        errorBody.userAgentHeight = window.innerHeight;
        errorBody.appClientVersion = "13.0.0";
        var sageURL = 'https://sage-sora.svc.overdrive.com/submit/error';
        var sageBody = JSON.stringify(errorBody);
        if (location.origin.match(/^ms-local-stream/)) {
          sageURL += '?_nautilus_origin='+location.origin;
        }
        console.log('[SAGE] -> '+sageURL, sageBody);
        var xhr = new XMLHttpRequest();
        xhr.open('POST', sageURL, true);
        xhr.setRequestHeader('Content-Type', 'application/json');
        xhr.send(sageBody);
      } catch (e) {
        console.warn('[SAGE] Error submitting auto report', e);
      }
    }


    NAUTILUS.transmitViaBridge = function (msg) {
      if (typeof BRIDGE === 'undefined' || !BRIDGE) { return false; }
      try {
        msg.dest = msg.dest || 'shell';
        if (BRIDGE.clientToShell) {
          BRIDGE.clientToShell(msg);
          return true;
        } else if (BRIDGE.clientToShellAsJSON) {
          BRIDGE.clientToShellAsJSON(JSON.stringify(msg));
          return true;
        }
      } catch (e) {
        console.warn('[NAUTILUS] failed to transmit:', msg);
      }
      return false;
    }


    NAUTILUS.hasCapability = function (cap) {
      if (typeof BRIDGE === 'undefined' || !BRIDGE) { return false; }
      if (BRIDGE.capabilities) { return BRIDGE.capabilities[cap]; }
      return false;
    }


    NAUTILUS.showRetryButton = function () {
      var root = document.documentElement;
      root.classList.add('resource-error');
      root.classList.add('resource-error-prompt');
      var errContainer = document.createElement('div');
      errContainer.className = 'error-container';
      var retryButton = document.createElement('button');
      errContainer.appendChild(retryButton);
      retryButton.className = 'resource-error-button retry-button';
      retryButton.appendChild(document.createTextNode("Retry"));
      retryButton.addEventListener('click', function (evt) {
        evt.preventDefault();
        retryButton.parentNode.removeChild(retryButton);
        root.classList.remove('resource-error-prompt');
        NAUTILUS.manualRepair();
      }, false);
      document.body.appendChild(errContainer);
      NAUTILUS.transmitViaBridge({ name: 'client:view:reveal' });
    }


    NAUTILUS.manualRepair = function (callback) {
      NAUTILUS.reattempts(NAUTILUS.reattempts() + 1);
      NAUTILUS.transmitViaBridge({
        name: 'roster:wipe',
        roster: {
          id: 'wishbone-js'
        }
      });
      NAUTILUS.transmitViaBridge({
        name: 'roster:wipe',
        roster: {
          id: 'wishbone-resource'
        }
      });
      NAUTILUS.schedule(function () {
        location.href = '/?repair='+(new Date()).getTime()+'&retry';
      }, 200);
    }


    NAUTILUS.autoRepair = function () {
      var reattempts = NAUTILUS.reattempts();
      if (reattempts < 1) {
        NAUTILUS.schedule(NAUTILUS.showRetryButton, 200);
      } else {
        NAUTILUS.reattempts(reattempts + 1);
        NAUTILUS.transmitViaBridge({
          name: 'client:view:failure',
          error: NAUTILUS.errorInfo
        });
        NAUTILUS.schedule(NAUTILUS.fallbackWithApology, 500);
      }
    }


    NAUTILUS.fallbackWithApology = function () {
      var root = document.documentElement;
      root.classList.add('resource-error');
      root.classList.add('resource-error-prompt');
      var errContainer = document.createElement('div');
      errContainer.className = 'error-container';
      var msgBox = document.createElement('div');
      msgBox.className = 'resource-error-message';
      msgBox.innerHTML = "<p> We're sorry that retrying hasn't worked. To fix this issue, please reset the app. </p> <br/> <p> Resetting signs you out and removes some app data from this device, but you won't  lose your progress. You'll see your books, notes, achievements, stats (like reading  time), and more when you sign in again. </p>";
      if (NAUTILUS.errorInfo.data && NAUTILUS.errorInfo.data.repairId) {
        msgBox.innerHTML += '<br /><p>(' + NAUTILUS.errorInfo.data.repairId + ')</p>';
      }
      errContainer.appendChild(msgBox);
      var button = document.createElement('button');
      button.classList.add('resource-error-button');
      button.innerHTML = "Reset app";
      button.addEventListener('click', function (evt) {
        evt.preventDefault();

        // Clear localStorage
        var reattempts = NAUTILUS.reattempts();
        localStorage.clear();
        NAUTILUS.reattempts(reattempts);

        var wipeAndReload = function () {
          // Remove all indexedDBs
          indexedDB.deleteDatabase('nautilus-data');
          indexedDB.deleteDatabase('nautilus-rosters');

          // Delete all cached responses
          window.caches && window.caches.keys().then(function (keys) {
            for (var x = 0; x < keys.length; x++) {
              console.log('Removing cache for key: ' + keys[x]);
              window.caches.delete(keys[x]);
            }
          });
          NAUTILUS.schedule(function () {
            location.href = '/?repair='+(new Date()).getTime()+'&reset';
          }, 200);
        };

        // Unregister service worker
        if (navigator.serviceWorker) {
          navigator.serviceWorker.getRegistrations().then(function (registrations) {
            registrations.forEach(function(sw) {
              console.log('Unregistering service worker');
              sw.unregister();
            });
            wipeAndReload();
          });
        } else {
          wipeAndReload();
        }
      }, false);
      errContainer.appendChild(button);
      document.body.appendChild(errContainer);
    }


    NAUTILUS.schedule = function (callback, ms) {
      clearTimeout(NAUTILUS.errorTimer);
      NAUTILUS.errorTimer = setTimeout(callback, ms || 0);
    }


    NAUTILUS.reattempts = function (assignValue) {
      var key = 'NAUTILUS_retry_attempts';
      if (typeof assignValue !== 'undefined') {
        try {
          if (assignValue) {
            localStorage.setItem(key, assignValue);
          } else {
            localStorage.removeItem(key);
          }
          return assignValue;
        } catch (e) {};
      }
      try { return parseFloat(localStorage.getItem(key)) || 0; } catch (e) {};
      return 0;
    }

    window.onerror = NAUTILUS.onScriptError;
    window.addEventListener('environment:ready', NAUTILUS.handleReady, true);
  </script>

  <!-- STYLES -->
  <link
    id="wishbone-css"
    rel="stylesheet"
    type="text/css"
    href="/assets/wishbone/13.0.0/main.css"
    onerror="NAUTILUS.onResourceError(this)"
  />

  <div id="runtime" aria-hidden="true">
    <!-- SCRIPTS -->
      <script nonce="9b0c92640c47264efb11acc5274dc5a7" id="NAUTILUS_BROWSER_SCRIPT" src="/assets/wishbone/13.0.0/nautilus-browser/nautilus-shell.js" type="module" onerror="NAUTILUS.onResourceError(this)"></script>
    <script nonce="9b0c92640c47264efb11acc5274dc5a7">
      NAUTILUS.locale = (function () {

  var locale = {};

  locale.available = ["de-DE","en-US","es-419","fr-CA","it-IT","ja-JP","ko-KR","mi-NZ","pt-BR","ru-RU","sv-SE","zh-Hans-CN","zh-Hant-TW"];

  var inferenceRanges = [
    'zh-cmn',
    'zh-cmn-Hans',
    'zh-cmn-Hant',
    'zh-cmn-CN',
    'zh-cmn-SG',
    'zh-cmn-HK',
    'zh-cmn-TW',
    'zh-cmn-MO',
    'zh-cmn-Hans-CN',
    'zh-cmn-Hans-SG',
    'zh-cmn-Hant-HK',
    'zh-cmn-Hant-TW',
    'zh-cmn-Hant-MO'
  ];
  var inferenceRules = [];
  for (var i = 0; i < inferenceRanges.length; i++) {
    var subtags = inferenceRanges[i].toUpperCase().split('-');
    inferenceRules.push([
      subtags.length - 2,
      subtags.slice(0, -2),
      subtags[subtags.length - 2],
      subtags[subtags.length - 1]
    ]);
  }
  inferenceRules.sort(function (a, b) { return a[0] - b[0]; });

  var prepareSubtags = function (tag, inferences) {
    var subtags = tag.toUpperCase().split('-');
    for (var i = 0; i < inferenceRules.length; i++) {
      var rule = inferenceRules[i];
      var index = rule[0], prefix = rule[1], insert = rule[2], match = rule[3];
      if (subtags[index] == match && subtags.slice(0,index).join('-') == prefix.join('-')) {
        if (inferences) {
          inferences[prefix] = inferences[prefix] || [];
          inferences[prefix].push(prefix.concat([insert]));
        }
        subtags.splice(index, 0, insert);
      }
    }
    return subtags;
  }

  var prepareRanges = function (ranges) {
    var inferences = {};
    var out = [];
    for (var i = 0; i < ranges.length; i++) {
      var range = ranges[i];
      if (range == '*') {
        out.push(range);
      } else {
        var subtags = prepareSubtags(range, inferences);
        out.push(expandRange(subtags, inferences));
      }
    }
    return flatten(out, 1);
  }

  var expandRange = function (range, inferences) {
    var out = [];
    if (inferences[range]) {
      for (var i = 0; i < inferences[range].length; i++) {
        out.push(expandRange(inferences[range][i], inferences));
      }
    }
    return flatten(out, 1).concat([range]);
  }

  var flatten = function (arr, level) {
    level = (typeof level == 'number') ? level : Infinity;
    var out = [];
    for (var i = 0; i < arr.length; i++) {
      if (level && arr[i] instanceof Array) {
        out = out.concat(flatten(arr[i], level - 1));
      } else {
        out.push(arr[i]);
      }
    }
    return out;
  }

  var compact = function (arr) {
    var out = [];
    for (var i = 0; i < arr.length; i++) {
      if (arr[i] && out.indexOf(arr[i]) < 0) { out.push(arr[i]); }
    }
    return out;
  };

  locale.negotiate = function (requestedRanges, availableRanges) {
    if (!(requestedRanges instanceof Array)) { return []; }
    if (typeof requestedRanges[0] != 'string') { return []; }

    if (typeof availableRanges == 'undefined') {
      availableRanges = locale.available;
    }
    var availableRules = [];
    for (var i = 0; i < availableRanges.length; i++) {
      availableRules.push([
        availableRanges[i],
        prepareSubtags(availableRanges[i])
      ]);
    }

    var ranges = prepareRanges(requestedRanges);

    var combos = [];
    for (var i = 0; i < ranges.length; i++) {
      var range = ranges[i];
      for (var j = 0; j < availableRules.length; j++) {
        var tag = availableRules[j][0], subtags = availableRules[j][1];
        var divergence = range.length;
        if (range[0] != '*') {
          for (var k = 0; k < range.length; k++) {
            if (range[k] != subtags[k]) { divergence = k; break; }
          }
        }
        var precision = divergence / range.length;
        if (precision > 0) {
          combos.push([tag, precision, combos.length]);
        }
      }
    }
    combos.sort(function (a,b) {
      return (b[1] == a[1]) ? (a[2] - b[2]) : (b[1] - a[1]);
    });

    var out = [];
    for (var i = 0; i < combos.length; i++) {
      if (out.indexOf(combos[i][0]) < 0) {
        out.push(combos[i][0]);
      }
    }
    return out;
  }

  var nautAndroidOverrides = function (uaTags) {
    var navTags = Array.prototype.slice.apply(uaTags || []);
    if (navTags.length <= 1) {
      return navTags;
    } else if (navTags[navTags.length - 1] == 'en-US') {
      navTags.pop();
    }
    var overrideTags = [];
    for (var i = 0; i < navTags.length; i++) {
      if (!navTags[i].match('-')) {
        overrideTags = navTags;
        break;
      }
      overrideTags.push(navTags[i]);
      var lang = navTags[i].replace(/-[^-]*$/, '');
      if (
        overrideTags.indexOf(lang) < 0 &&
        (navTags[i+1] || '').replace(/-[^-]*$/, '') != lang
      ) {
        overrideTags.push(lang);
      }
    }
    return overrideTags.slice(0, 16);
  }

  locale.determine = function () {
    this.userOverrideTags = [(
      window.localStorage &&
      JSON.parse(window.localStorage.getItem('wishbone:locale:last'))
    )];
    this.userOverrideTags = compact(this.userOverrideTags);
    this.userAgentTags = compact(flatten([
      window.navigator.languages,
      window.navigator.language,
      window.navigator.browserLanguage
    ]));
    if (navigator.userAgent.match(/Wishbone.*Android/)) {
      this.userAgentTags = compact(nautAndroidOverrides(this.userAgentTags));
    }
    this.serverDefaultTag = 'en-US';
    this.userAgentTag = this.negotiate(this.userAgentTags)[0];
    this.tag = (
      this.negotiate(this.userOverrideTags)[0] ||
      this.userAgentTag ||
      this.serverDefaultTag
    );
    this.isEnglish = this.tag.match(/^en(-|$)/) ? true : false;
  };

  locale.determine();

  return locale;

})();

      NAUTILUS.scriptHelper = {
  createScriptURL: function(str) {
    return str;
  }
};

if (window.trustedTypes && window.trustedTypes.createPolicy) {
  NAUTILUS.scriptHelper = window.trustedTypes.createPolicy('scriptHelper', {
    createScriptURL: function(urlStr) {
      const url = new URL(urlStr, window.location.origin);
      if (url.origin !== window.location.origin) {
          throw new TypeError('invalid URL');
      }
      return urlStr;
    }
  });
}

NAUTILUS.tryPrevLocale = function(script, src) {
  localStorage.setItem('tryprev', script.src);
  var locale = localStorage.getItem('wishbone:locale:resources');
  try {
    locale = JSON.parse(locale);
  } catch (e) {}
  var tryingCurrLocale = src.indexOf(NAUTILUS.locale.tag + '.js') > -1;
  if (locale && locale !== NAUTILUS.locale.tag && tryingCurrLocale)  {
    localStorage.setItem('prevout', locale + ' ' + NAUTILUS.locale.tag);
    var replace = src.replace(NAUTILUS.scriptHelper.createScriptURL(NAUTILUS.locale.tag + '.js', locale + '.js'));
    NAUTILUS.loadJS(replace);
  } else {
    NAUTILUS.onResourceError(script);
    NAUTILUS.autoRepair('wishbone-resource');
  }
}

NAUTILUS.loadJS = function(src) {
  var script = document.createElement('script');
  script.src = NAUTILUS.scriptHelper.createScriptURL(src);
  script.onerror = function () {
    NAUTILUS.tryPrevLocale(script, src);
  };
  script.defer = true;
  script.async = false;
  document.getElementById('runtime').appendChild(script);
}

if (!window.Intl
    || !window.Intl.PluralRules
    || !window.Intl.ListFormat
    || !window.Intl.RelativeTimeFormat
) {
  NAUTILUS.loadJS('/assets/wishbone/13.0.0/assets/polyfills/' + NAUTILUS.locale.tag + '.js');
  NAUTILUS.needsPolyfill = true;
}
NAUTILUS.loadJS('/assets/wishbone/13.0.0/translations/' + NAUTILUS.locale.tag + '.js');
NAUTILUS.loadJS('/assets/wishbone/13.0.0/main.js');

    </script>
  </div>
</html>
